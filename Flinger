-- fling script!
-- UPDATES: Tried to make fling more powerful - Added Fling All Button - Tried to make GUI as clean as I could!
-- STAY TUNED FOR NEXT UPDATE <3

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer

-- ===== CONFIG =====
local BEHIND_DISTANCE = 0.001
local SPIN = Vector3.new(0,1110,0)
local RAM_FORCE = 1000
local SAFE_VERTICAL_OFFSET = 0

-- ===== Utilities =====
local function safeFindHRP(character)
    if not character then return nil end
    return character:FindFirstChild("HumanoidRootPart")
end

local function getTargetByQuery(query)
    if not query or query == "" then return nil end
    local q = query:lower()
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then
            local dn = (p.DisplayName or ""):lower()
            local un = (p.Name or ""):lower()
            if dn:find(q,1,true) or un:find(q,1,true) then
                return p
            end
        end
    end
    return nil
end

local function setAssemblyLinearVelocity(part, vec)
    if not part or not part:IsA("BasePart") then return end
    pcall(function() part.AssemblyLinearVelocity = vec end)
end

local function setAssemblyAngularVelocity(part, vec)
    if not part or not part:IsA("BasePart") then return end
    pcall(function() part.AssemblyAngularVelocity = vec end)
end

-- ===== GUI =====
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "RamSpinGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local padding = 10
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0,420,0,180)
mainFrame.Position = UDim2.new(0.5,-210,0.08,0)
mainFrame.AnchorPoint = Vector2.new(0.5,0)
mainFrame.BackgroundColor3 = Color3.fromRGB(18,18,18)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui
mainFrame.Transparency = 0.12

Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0,12)
local mainStroke = Instance.new("UIStroke", mainFrame)
mainStroke.Color = Color3.fromRGB(44,44,44)
mainStroke.Thickness = 1
mainStroke.Transparency = 0.6

-- Title
local titleBar = Instance.new("Frame", mainFrame)
titleBar.Size = UDim2.new(1,-padding*2,0,34)
titleBar.Position = UDim2.new(0,padding,0,padding)
titleBar.BackgroundTransparency = 1

local title = Instance.new("TextLabel", titleBar)
title.Size = UDim2.new(0.6,0,1,0)
title.Position = UDim2.new(0,0,0,0)
title.BackgroundTransparency = 1
title.Text = "Fling GUI by LongaaVS2"
title.Font = Enum.Font.GothamSemibold
title.TextSize = 18
title.TextColor3 = Color3.fromRGB(240,240,240)
title.TextXAlignment = Enum.TextXAlignment.Left

local miniHint = Instance.new("TextLabel", titleBar)
miniHint.Size = UDim2.new(0.4,0,1,0)
miniHint.Position = UDim2.new(0.6,0,0,0)
miniHint.BackgroundTransparency = 1
miniHint.Text = "RightAlt to Toggle"
miniHint.Font = Enum.Font.Gotham
miniHint.TextSize = 12
miniHint.TextColor3 = Color3.fromRGB(160,160,160)
miniHint.TextXAlignment = Enum.TextXAlignment.Right

-- Input row
local row = Instance.new("Frame", mainFrame)
row.Size = UDim2.new(1,-padding*2,0,42)
row.Position = UDim2.new(0,padding,0,padding+34+8)
row.BackgroundTransparency = 1

local inputBox = Instance.new("TextBox", row)
inputBox.Size = UDim2.new(1,-116,1,0)
inputBox.Position = UDim2.new(0,0,0,0)
inputBox.BackgroundColor3 = Color3.fromRGB(32,32,32)
inputBox.TextColor3 = Color3.fromRGB(245,245,245)
inputBox.PlaceholderText = "Target Name"
inputBox.ClearTextOnFocus = true
inputBox.Font = Enum.Font.Gotham
inputBox.TextSize = 15
inputBox.Text = ""
inputBox.AutoLocalize = false
inputBox.TextXAlignment = Enum.TextXAlignment.Left
Instance.new("UICorner",inputBox).CornerRadius = UDim.new(0,8)
Instance.new("UIStroke",inputBox).Color = Color3.fromRGB(50,50,50)
local inputPadding = Instance.new("UIPadding",inputBox)
inputPadding.PaddingLeft = UDim.new(0,8)

local actionBtn = Instance.new("TextButton", row)
actionBtn.Size = UDim2.new(0,116,1,0)
actionBtn.Position = UDim2.new(1.013,0,0,0)
actionBtn.AnchorPoint = Vector2.new(1,0)
actionBtn.BackgroundColor3 = Color3.fromRGB(60,150,255)
actionBtn.Text = "Fling"
actionBtn.Font = Enum.Font.GothamBold
actionBtn.TextSize = 15
actionBtn.TextColor3 = Color3.fromRGB(255,255,255)
Instance.new("UICorner", actionBtn).CornerRadius = UDim.new(0,8)
Instance.new("UIStroke", actionBtn).Color = Color3.fromRGB(38,105,190)

-- Status label
local statusLabel = Instance.new("TextLabel", mainFrame)
statusLabel.Size = UDim2.new(1,-padding*2,0,22)
statusLabel.Position = UDim2.new(0,padding,1,-(padding+36.5))
statusLabel.BackgroundTransparency = 1
statusLabel.Text = "Ready"
statusLabel.Font = Enum.Font.Gotham
statusLabel.TextSize = 13
statusLabel.TextColor3 = Color3.fromRGB(200,200,200)
statusLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Dragging
local dragging = false
local dragInput, dragStartPos, frameStartPos
titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStartPos = input.Position
        frameStartPos = mainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then dragging = false end
        end)
    end
end)
titleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)
RunService.RenderStepped:Connect(function()
    if dragging and dragInput and frameStartPos and dragStartPos then
        local delta = dragInput.Position - dragStartPos
        mainFrame.Position = UDim2.new(frameStartPos.X.Scale, frameStartPos.X.Offset + delta.X,
                                       frameStartPos.Y.Scale, frameStartPos.Y.Offset + delta.Y)
    end
end)

-- RightAlt toggle
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.RightAlt then
        screenGui.Enabled = not screenGui.Enabled
    end
end)

-- ===== Fling logic =====
local active = false
local flingTask

local function stopFling()
    active = false
    if flingTask then flingTask = nil end

    actionBtn.Text = "Fling"
    actionBtn.BackgroundColor3 = Color3.fromRGB(60,150,255)
    actionBtn.TextColor3 = Color3.fromRGB(255,255,255)
    actionBtn.Visible = true

    -- Re-enable Fling All button if it exists
    if flingAllBtn then
        pcall(function()
            flingAllBtn.Active = true
            flingAllBtn.AutoButtonColor = true
            flingAllBtn.BackgroundColor3 = Color3.fromRGB(60,200,60)
            flingAllBtn.TextColor3 = Color3.fromRGB(255,255,255)
        end)
    end

    statusLabel.Text = "Ready"
    local myHRP = safeFindHRP(LocalPlayer.Character)
    if myHRP then
        setAssemblyLinearVelocity(myHRP, Vector3.zero)
        setAssemblyAngularVelocity(myHRP, Vector3.zero)
    end
end

local function flingTarget(targetPlayer)
    local myChar = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local myHRP = safeFindHRP(myChar)
    local targetHRP = safeFindHRP(targetPlayer.Character)
    if not (myHRP and targetHRP) then
        statusLabel.Text = "Target not available"
        return
    end
    -- Teleport behind
    local behindPos = targetHRP.Position - targetHRP.CFrame.LookVector * BEHIND_DISTANCE
    local desired = CFrame.lookAt(behindPos + Vector3.new(0, SAFE_VERTICAL_OFFSET,0), targetHRP.Position)
    pcall(function() myChar:PivotTo(desired) end)

    setAssemblyAngularVelocity(myHRP, SPIN)
    statusLabel.Text = ("Ramming %s..."):format(targetPlayer.Name)
    active = true
    while active and targetHRP.Parent do
        local dir = (targetHRP.Position - myHRP.Position).Unit
        setAssemblyLinearVelocity(myHRP, dir * RAM_FORCE)
        RunService.Heartbeat:Wait()
    end
    setAssemblyLinearVelocity(myHRP, Vector3.zero)
    setAssemblyAngularVelocity(myHRP, Vector3.zero)
    stopFling()
end

local function startFlingFor(query)
    -- Guard: if "Fling All" is running, do not allow single-target fling.
    if flingAllActive then
        statusLabel.Text = "Can't use single-target while Fling All is active"
        return
    end

    if active then stopFling() return end
    local target = getTargetByQuery(query)
    if not target then statusLabel.Text = "Target not found" return end
    if target == LocalPlayer then statusLabel.Text = "Can't target yourself" return end

    actionBtn.Text = "Stop"
    -- red background when single-target is active
    actionBtn.BackgroundColor3 = Color3.fromRGB(220,60,60)
    actionBtn.TextColor3 = Color3.fromRGB(255,255,255)

    -- visually disable flingAllBtn while single-target is active
    if flingAllBtn then
        pcall(function()
            flingAllBtn.Active = false
            flingAllBtn.AutoButtonColor = false
            flingAllBtn.BackgroundColor3 = Color3.fromRGB(80,80,80)
            flingAllBtn.TextColor3 = Color3.fromRGB(160,160,160)
        end)
    end

    statusLabel.Text = ("Locking on %s..."):format(target.Name)
    flingTask = task.spawn(function()
        pcall(function() flingTarget(target) end)
    end)
end

-- Connectors (use wrappers so they respect flingAllActive)
actionBtn.MouseButton1Click:Connect(function()
    if flingAllActive then
        -- optional: give visual feedback
        statusLabel.Text = "Fling All is active — stop it first"
        return
    end
    startFlingFor(inputBox.Text or "")
end)

inputBox.FocusLost:Connect(function(enter)
    if enter then
        if flingAllActive then
            statusLabel.Text = "Fling All is active — stop it first"
            return
        end
        startFlingFor(inputBox.Text or "")
    end
end)
LocalPlayer.CharacterRemoving:Connect(stopFling)
Players.PlayerRemoving:Connect(stopFling)

-- ===== Fling All =====
local flingAllBtn = Instance.new("TextButton", mainFrame)
flingAllBtn.Size = UDim2.new(1,-padding*2,0,28)
flingAllBtn.Position = UDim2.new(0,padding,1,-(padding+68))
flingAllBtn.BackgroundColor3 = Color3.fromRGB(60,200,60)
flingAllBtn.Text = "Fling All"
flingAllBtn.Font = Enum.Font.GothamBold
flingAllBtn.TextSize = 15
flingAllBtn.TextColor3 = Color3.fromRGB(255,255,255)
Instance.new("UICorner", flingAllBtn).CornerRadius = UDim.new(0,8)

local flingAllActive = false
local flingAllTask
local hoverTweenInfo = TweenInfo.new(0.12, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

-- Hover only works when not active
flingAllBtn.MouseEnter:Connect(function()
    if not flingAllActive then
        TweenService:Create(flingAllBtn, hoverTweenInfo, {BackgroundColor3 = Color3.fromRGB(80,220,80)}):Play()
    end
end)
flingAllBtn.MouseLeave:Connect(function()
    if not flingAllActive then
        TweenService:Create(flingAllBtn, hoverTweenInfo, {BackgroundColor3 = Color3.fromRGB(60,200,60)}):Play()
    end
end)

local function stopFlingAll()
    flingAllActive = false
    flingAllTask = nil
    flingAllBtn.Text = "Fling All"
    flingAllBtn.BackgroundColor3 = Color3.fromRGB(60,200,60)
    flingAllBtn.TextColor3 = Color3.fromRGB(255,255,255)

    -- Re-enable single-target fling button
    actionBtn.BackgroundColor3 = Color3.fromRGB(60,150,255)
    actionBtn.TextColor3 = Color3.fromRGB(255,255,255)
    actionBtn.Active = true
    actionBtn.AutoButtonColor = true
    actionBtn.Visible = true -- restore visibility

    statusLabel.Text = "Ready"
    local myHRP = safeFindHRP(LocalPlayer.Character)
    if myHRP then
        setAssemblyLinearVelocity(myHRP, Vector3.zero)
        setAssemblyAngularVelocity(myHRP, Vector3.zero)
    end
end

local function startFlingAll()
    -- Prevent Fling All from starting while a single-target fling is active
    if active then
        statusLabel.Text = "Can't start Fling All while single-target fling is active"
        return
    end

    if flingAllActive then
        stopFlingAll()
        return
    end

    flingAllActive = true
    flingAllBtn.Text = "Stop"
    flingAllBtn.BackgroundColor3 = Color3.fromRGB(220,60,60)
    flingAllBtn.TextColor3 = Color3.fromRGB(255,255,255)

    -- Disable single-target fling button visually and functionally
    actionBtn.Active = false
    actionBtn.AutoButtonColor = false
    actionBtn.BackgroundColor3 = Color3.fromRGB(80,80,80)
    actionBtn.TextColor3 = Color3.fromRGB(160,160,160)
    actionBtn.Visible = false -- fully hide so it cannot be clicked or hovered

    flingAllTask = task.spawn(function()
        local playersList = Players:GetPlayers()
        local myChar = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local myHRP = safeFindHRP(myChar)
        if not myHRP then
            stopFlingAll()
            return
        end

        for _, target in ipairs(playersList) do
            if target ~= LocalPlayer then
                local targetHRP = safeFindHRP(target.Character)
                if targetHRP and targetHRP.Parent and targetHRP.CanCollide then
                    statusLabel.Text = ("Flinging %s..."):format(target.Name)
                    -- Teleport behind
                    local behindPos = targetHRP.Position - targetHRP.CFrame.LookVector * BEHIND_DISTANCE
                    local desired = CFrame.lookAt(behindPos + Vector3.new(0, SAFE_VERTICAL_OFFSET,0), targetHRP.Position)
                    pcall(function() myChar:PivotTo(desired) end)
                    -- Apply fling
                    setAssemblyAngularVelocity(myHRP, SPIN)
                    local startTime = tick()
                    while tick() - startTime < 2.1 do
                        if not flingAllActive then break end
                        local dir = (targetHRP.Position - myHRP.Position).Unit
                        setAssemblyLinearVelocity(myHRP, dir * RAM_FORCE)
                        RunService.Heartbeat:Wait()
                    end
                    setAssemblyLinearVelocity(myHRP, Vector3.zero)
                    setAssemblyAngularVelocity(myHRP, Vector3.zero)
                    if not flingAllActive then break end
                end
            end
        end

        stopFlingAll()
    end)
end

flingAllBtn.MouseButton1Click:Connect(startFlingAll)
